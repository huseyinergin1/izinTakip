@model yillikizin.Models.HareketViewModel

@{
    ViewBag.Title = "Personel Hareketleri";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
<link href="~/Content/Admin/css/personelIndex.css" rel="stylesheet" />
<div class="container-fluid" style="margin: 0 auto;">
    <div class="row">
        <div class="col-md-12">
            <!-- Personel Tablosunu sarmalayan div -->
            <div style="max-height: 400px; overflow-y: scroll;">
                <table class="table-hover table-striped table-bordered table shadow-sm" id="personelListesi">
                    <thead class="thead-light">
                        <tr>
                            <th style="position: sticky; top: 0; background-color: white; z-index: 3;">Seç</th>
                            <th scope="col" class="sortable" data-sort="string" style="position: sticky; top: 0; background-color: white; z-index: 3;">Adı</th>
                            <th scope="col" class="sortable" data-sort="string" style="position: sticky; top: 0; background-color: white; z-index: 3;">Soyadı</th>
                            <th scope="col" class="sortable" data-sort="string" style="position: sticky; top: 0; background-color: white; z-index: 3;">Kart Numarası</th>
                            <th scope="col" class="sortable" data-sort="string" style="position: sticky; top: 0; background-color: white; z-index: 3;">Sicil Numarası</th>
                            <th scope="col" class="sortable" data-sort="string" style="position: sticky; top: 0; background-color: white; z-index: 3;">Departman</th>
                        </tr>
                        <tr>
                            <th style="position: sticky; top: 37px; background-color: white; z-index: 2;">
                                <iframe id="selectAllIframe" srcdoc="
                                <html>
                                <body style='background-color:white;'>
                                    <input type='checkbox' id='selectAll' onclick='parent.toggleSelectAll()'>
                                    <label for='selectAll' style='font-size:14px;font-family:sans-serif;'></label>
                                </body>
                                </html>"
                                style="width: 40px; height: 40px; "></iframe>
                            </th>
                            <th style="position: sticky; top: 37px; background-color: white; z-index: 2;"><input type="text" class="form-control arama" placeholder="Adı ara..." /></th>
                            <th style="position: sticky; top: 37px; background-color: white; z-index: 2;"><input type="text" class="form-control arama" placeholder="Soyadı ara..." /></th>
                            <th style="position: sticky; top: 37px; background-color: white; z-index: 2;"><input type="text" class="form-control arama" placeholder="Kart Numarası ara..." /></th>
                            <th style="position: sticky; top: 37px; background-color: white; z-index: 2;"><input type="text" class="form-control arama" placeholder="Sicil Numarası ara..." /></th>
                            <th style="position: sticky; top: 37px; background-color: white; z-index: 2;"><input type="text" class="form-control arama" placeholder="Departman ara..." /></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var personel in Model.PersonelListesi)
                        {
                            <tr class="personel-row @(Model.SelectedPersonelId == personel.id ? "table-active" : "")" data-personel-id="@personel.id" onclick="toggleRowSelection(@personel.id)">
                                <td class="selection-cell">
                                    <iframe class="row-checkbox-iframe" srcdoc="
                                    <html>
                                    <body style='background-color:white;'>
                                        <input type='checkbox' id='checkbox_@personel.id' onclick='parent.toggleRowSelection(@personel.id)'>
                                        <label for='checkbox_@personel.id' style='font-size:14px;font-family:sans-serif;'></label>
                                    </body>
                                    </html>"
                                    style="width: 40px; height: 40px; border: none;"></iframe>
                                </td>
                                <td>@personel.adi</td>
                                <td>@personel.soyadi</td>
                                <td>@personel.kartno</td>
                                <td>@personel.sicilno</td>
                                <td>@personel.departman</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="col-md-12 mt-4">
            <h3>Hareketler</h3>

            <!-- Tarih Filtreleme Formu -->
            <div class="form-inline mb-3">
                <label for="baslangicTarihi" class="mr-2">Başlangıç Tarihi:</label>
                <input type="date" id="baslangicTarihi" class="form-control mr-2" />

                <label for="bitisTarihi" class="mr-2">Bitiş Tarihi:</label>
                <input type="date" id="bitisTarihi" class="form-control mr-2" />
                <button id="filtrele" class="btn btn-primary mr-2">Filtrele</button>
                <button id="yeniHareket" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#yeniHareketModal" onclick="setKartNo()">Yeni Hareket</button>
                <button id="topluIslemler" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#topluIslemlerModal">Toplu İşlemler</button>
            </div>

            <!-- Hareket Tablosu -->
            <div id="hareketListesi" class="mt-3">
                @Html.Partial("_HareketListesi", Model.HareketListesi)
            </div>
        </div>

    </div>
</div>
<!-- Toplu İşlemler Modal -->
<div class="modal fade" id="topluIslemlerModal" tabindex="-1" role="dialog" aria-labelledby="topluIslemlerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="topluIslemlerModalLabel">Toplu İşlemler</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Kapat">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div id="popupMessageToplu" class="alert" style="display:none;"></div>
            <div class="modal-body">
                <form id="topluIslemlerForm">
                    <div class="form-row mb-3">
                        <label>İşlem Türü:</label>
                        <div class="btn-group btn-group-toggle d-flex" data-toggle="buttons">
                            <label class="btn btn-outline-primary flex-fill active">
                                <input type="radio" name="islemTuru" value="ekle" checked> Toplu Hareket Ekle
                            </label>
                            <label class="btn btn-outline-primary flex-fill">
                                <input type="radio" name="islemTuru" value="sil"> Toplu Hareket Sil
                            </label>
                        </div>
                    </div>
                    <div class="form-row mb-3">
                        <div class="col-md-6">
                            <label for="baslangicTarihiToplu">Başlangıç Tarihi:</label>
                            <input type="date" class="form-control" id="baslangicTarihiToplu" name="baslangicTarihiToplu" required />
                        </div>
                        <div class="col-md-6">
                            <label for="bitisTarihiToplu">Bitiş Tarihi:</label>
                            <input type="date" class="form-control" id="bitisTarihiToplu" name="bitisTarihiToplu" required />
                        </div>
                    </div>
                    <div class="form-row mb-3" id="saatRow">
                        <div class="col-md-6">
                            <label for="saatToplu">Saat:</label>
                            <input type="time" class="form-control" id="saatToplu" name="saatToplu" required />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Yön Bilgisi</label>
                        <div class="btn-group btn-group-toggle" data-toggle="buttons">
                            <label class="btn btn-outline-primary active">
                                <input type="radio" name="yonToplu" value="01" checked> Giriş
                            </label>
                            <label class="btn btn-outline-primary">
                                <input type="radio" name="yonToplu" value="02"> Çıkış
                            </label>
                            <label class="btn btn-outline-primary" id="yonTopluBelirsiz">
                                <input type="radio" name="yonToplu" value="03"> Belirsiz Yön
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="btnTopluIslemKaydet">Kaydet</button>
            </div>
        </div>
    </div>
</div>
<!-- Yeni Hareket Modal -->
<div class="modal fade" id="yeniHareketModal" tabindex="-1" role="dialog" aria-labelledby="yeniHareketModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="yeniHareketModalLabel">Yeni Hareket Ekle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Kapat">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="popupMessage" class="alert" style="display:none;"></div>
                <form id="yeniHareketForm">
                    <div class="form-row mb-3">
                        <div class="col-md-4">
                            <label for="kartNo">Kart Numarası:</label>
                            <input type="text" class="form-control" id="kartNo" name="kartNo" required />
                        </div>
                        <div class="col-md-4">
                            <label for="tarih">Tarih:</label>
                            <input type="date" class="form-control" id="tarih" name="tarih" required />
                        </div>
                        <div class="col-md-4">
                            <label for="saat">Saat:</label>
                            <input type="time" class="form-control" id="saat" name="saat" required />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Yön Bilgisi</label>
                        <div class="btn-group btn-group-toggle" data-toggle="buttons">
                            <label class="btn btn-outline-primary active">
                                <input type="radio" name="yon" value="01" checked> Giriş
                            </label>
                            <label class="btn btn-outline-primary">
                                <input type="radio" name="yon" value="02"> Çıkış
                            </label>
                        </div>
                    </div>
                    <input type="hidden" id="terminalNo" name="terminalNo" value="001" />
                </form>
                <div id="popupMessage" class="alert" style="display: none; margin-top: 10px;"></div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="btnHareketKaydet">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
var selectedIds = [];
var sortOrder = {}; // Sıralama durumunu takip etmek için bir nesne
var selectedKartNo = '';

$(document).ready(function () {
    // Sayfa yüklendiğinde seçilen personeli işaretle
    var selectedPersonelId = sessionStorage.getItem('selectedPersonelId');
    if (selectedPersonelId) {
        var row = $(`tr[data-personel-id='${selectedPersonelId}']`);
        row.addClass('table-active');
        row.find("iframe").contents().find("input[type='checkbox']").prop('checked', true);
    }

    // İşlem Türü değiştiğinde yön bilgisi ve saat girişini göster/gizle
    $('input[name="islemTuru"]').change(function () {
        toggleYonRow();
        toggleSaatRow();
    });

    // Yön Bilgisi değiştiğinde saat girişini göster/gizle
    $('input[name="yonToplu"]').change(function () {
        toggleSaatRow();
    });
    function setKartNo() {
        if (selectedKartNo) {
            $('#yeniHareketModal #kartNo').val(selectedKartNo);
        }
    }

    function toggleYonRow() {
        var islemTuru = $('input[name="islemTuru"]:checked').val();
        if (islemTuru === 'sil') {
            // Eğer işlem türü sil ise Belirsiz Yön seçeneğini göster
            $('#yonTopluBelirsiz').show();
        } else {
            // Eğer işlem türü ekle ise Belirsiz Yön seçeneğini gizle
            $('#yonTopluBelirsiz').hide();
            // Giriş yönünü varsayılan olarak seç
            $('input[name="yonToplu"][value="01"]').prop('checked', true);
        }
    }

    function toggleSaatRow() {
        var islemTuru = $('input[name="islemTuru"]:checked').val();
        var yon = $('input[name="yonToplu"]:checked').val();

        if (islemTuru === 'sil' && yon === '03') {
            // Eğer işlem türü sil ve yön belirsiz ise saat girişini gösterme
            $('#saatRow').hide();
            $('#saatToplu').removeAttr('required');
        } else if (islemTuru === 'sil') {
            // Eğer işlem türü sil ise saat girişini gösterme
            $('#saatRow').hide();
            $('#saatToplu').removeAttr('required');
        } else {
            // Diğer durumlarda saat girişini göster
            $('#saatRow').show();
            $('#saatToplu').attr('required', 'required');
        }
    }
    $('#yeniHareketModal').on('show.bs.modal', function () {
        // Seçili personelin kart numarasını set et
        if (selectedKartNo) {
            $('#kartNo').val(selectedKartNo);
        }

        // Bugünün tarihini set et
        var today = new Date().toISOString().split('T')[0];
        $('#tarih').val(today);

        // Şimdiki saati set et
        var now = new Date();
        var hours = String(now.getHours()).padStart(2, '0');
        var minutes = String(now.getMinutes()).padStart(2, '0');
        $('#saat').val(`${hours}:${minutes}`);

        // Varsayılan olarak "Giriş" seçeneğini işaretle
        $('input[name="yon"][value="01"]').prop('checked', true).parent().addClass('active');
        $('input[name="yon"][value="02"]').parent().removeClass('active');
    });
    // Toplu İşlem Kaydetme
    $('#btnTopluIslemKaydet').click(function () {
        $('#popupMessageToplu').hide().removeClass('alert-success alert-danger').text('');

        var islemTuru = $('#topluIslemlerModal').find('input[name="islemTuru"]:checked').val();
        var baslangicTarihi = $('#topluIslemlerModal').find('#baslangicTarihiToplu').val();
        var bitisTarihi = $('#topluIslemlerModal').find('#bitisTarihiToplu').val();
        var saat = $('#topluIslemlerModal').find('#saatToplu').val();
        var yon = $('#topluIslemlerModal').find('input[name="yonToplu"]:checked').val();

        if (!islemTuru || !baslangicTarihi || !bitisTarihi || (islemTuru === 'ekle' && !saat) || !yon) {
            $('#popupMessageToplu').addClass('alert-danger').text('Lütfen tüm alanları doldurun.').show();
            return;
        }

        $.ajax({
            type: 'POST',
            url: '@Url.Action("TopluIslem", "Hareket")',
            data: {
                islemTuru: islemTuru,
                baslangicTarihi: baslangicTarihi,
                bitisTarihi: bitisTarihi,
                saat: islemTuru === 'ekle' ? saat : null,
                yon: yon,
                selectedPersonelIds: selectedIds // Seçilen personel ID'lerini gönder
            },
            success: function (response) {
                if (response.success) {
                    $('#popupMessageToplu').addClass('alert-success').text('İşlem başarıyla gerçekleştirildi.').show();
                    setTimeout(function () {
                        location.reload();
                    }, 500);
                }
            },
            error: function (xhr, status, error) {
                var errorMessage = 'Hata Oluştu: ';
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage += xhr.responseJSON.message;
                } else {
                    errorMessage += error;
                }
                $('#popupMessageToplu').addClass('alert-danger').text(errorMessage).show();
            }
        });
    });

    // Sayfa yüklendiğinde varsayılan seçeneği görsel olarak işaretleyin
    $('input[name="islemTuru"][value="ekle"]').closest('label').addClass('active');
    toggleYonRow(); // Varsayılan durum için yön girişini kontrol et
    toggleSaatRow(); // Varsayılan durum için saat girişini kontrol et

    // Sayfa yüklendiğinde bugünün hareketlerini filtrele
    var today = new Date();
    var day = String(today.getDate()).padStart(2, '0');
    var month = String(today.getMonth() + 1).padStart(2, '0'); // Aylar 0-11 arasında olduğu için 1 ekliyoruz
    var year = today.getFullYear();
    var todayDate = year + '-' + month + '-' + day;

    $('#baslangicTarihi').val(todayDate);
    $('#bitisTarihi').val(todayDate);
    filterHareketler(todayDate, todayDate);

    // Filtreleme butonu tıklama olayını yönet
    $('#filtrele').click(function () {
        var baslangicTarihi = $('#baslangicTarihi').val();
        var bitisTarihi = $('#bitisTarihi').val();

        if (!baslangicTarihi || !bitisTarihi) {
            showMessage('Lütfen tarihleri doldurun.', 'danger');
            return;
        }

        filterHareketler(baslangicTarihi, bitisTarihi);
    });

    function filterHareketler(baslangicTarihi, bitisTarihi) {
        var personelId = $('.table-active').data('personel-id'); // Aktif personel ID'sini al
        $.ajax({
            url: '@Url.Action("FilterHareketler", "Hareket")',
            type: 'GET',
            data: { personelId: personelId, baslangicTarihi: baslangicTarihi, bitisTarihi: bitisTarihi },
            success: function (data) {
                $('#hareketListesi').html(data);
            },

        });
    }

    // Personel hareketlerini listeleme
    $('#personelListesi').on('click', '.personel-row', function () {
        var personelId = $(this).data('personel-id');
        selectedKartNo = $(this).data('kart-no'); // Seçilen personelin kart numarasını sakla
        getHareketler(personelId);
        $('#personelListesi .personel-row').removeClass('table-active');
        $(this).addClass('table-active');
        // Seçilen personelin ID'sini sakla
        sessionStorage.setItem('selectedPersonelId', personelId);
    });

    // Her sütun için arama fonksiyonu
    $('.arama').on('keyup', function () {
        var index = $(this).parent().index();
        var aramaTermi = $(this).val().toLowerCase();
        $('#personelListesi tbody tr').filter(function () {
            $(this).toggle($(this).find('td').eq(index).text().toLowerCase().indexOf(aramaTermi) > -1);
        });
    });

    // Sıralama fonksiyonu
    $('.sortable').on('click', function () {
        var table = $('#personelListesi');
        var tbody = table.find('tbody');
        var rows = tbody.find('tr').toArray();
        var index = $(this).index();
        var dataType = $(this).data('sort');
        var order = sortOrder[index] || 'asc';

        // Sıralama işlemi
        rows.sort(function (a, b) {
            var A = $(a).find('td').eq(index).text();
            var B = $(b).find('td').eq(index).text();
            if (dataType === 'number') {
                return order === 'asc' ? parseFloat(A) - parseFloat(B) : parseFloat(B) - parseFloat(A);
            } else {
                return order === 'asc' ? A.localeCompare(B) : B.localeCompare(A);
            }
        });

        // Yeni sıralanmış satırları tabloya ekleme
        tbody.empty().append(rows);

        // Sıralama yönünü değiştir
        sortOrder[index] = order === 'asc' ? 'desc' : 'asc';
    });

// Hareket kaydetme
$('#btnHareketKaydet').click(function () {
    $('#popupMessage').hide().removeClass('alert-success alert-danger').text('');

    var kartNo = $('#yeniHareketModal').find('#kartNo').val().trim();
    var tarih = $('#yeniHareketModal').find('#tarih').val();
    var saat = $('#yeniHareketModal').find('#saat').val();
    var yon = $('#yeniHareketModal').find('input[name="yon"]:checked').val();
    var terminalNo = $('#yeniHareketModal').find('#terminalNo').val();

    if (!kartNo || !tarih || !saat || !yon) {
        $('#popupMessage').addClass('alert-danger').text('Lütfen tüm alanları doldurun.').show();
        return;
    }

    $.ajax({
        type: 'POST',
        url: '@Url.Action("YeniHareketEkle", "Hareket")',
        data: { kartNo: kartNo, terminalNo: terminalNo, tarih: tarih, saat: saat, yon: yon },
        success: function (response) {
            if (response.success) {
                $('#popupMessage').addClass('alert-success').text('Hareket başarıyla eklendi.').show();

                // Yeni satırı oluştur
                var newRow = `
                    <tr data-id="${response.hareketId}" data-kart-no="${kartNo}" data-tarih="${tarih}" data-saat="${saat}" data-islem-tipi="${yon}">
                        <td>
                            ${yon === "01" ?
                                '<i class="fas fa-sign-in-alt text-success fa-lg"></i>' :
                                '<i class="fas fa-sign-out-alt text-danger fa-lg"></i>'}
                        </td>
                        <td>${terminalNo}</td>
                        <td>${tarih}</td>
                        <td>${saat}</td>
                        <td>
                            ${yon === "01" ? "Giriş" : "Çıkış"}
                        </td>
                        <td>
                            <button class="btn btn-primary btn-sm btn-duzenle" data-id="${response.hareketId}">Düzenle</button>
                            <button class="btn btn-danger btn-sm btn-sil" data-id="${response.hareketId}">Sil</button>
                        </td>
                    </tr>
                `;

                // Yeni hareketi tabloya ekle
                $('#hareketTablosu').prepend(newRow); // Tablonun en üstüne ekler

                // Modal'ı kapat
                $('#yeniHareketModal').modal('hide');

                // İstediğiniz başka işlemleri ekleyebilirsiniz
            } else {
                $('#popupMessage').addClass('alert-danger').text(response.message).show();
            }
        },
        error: function (xhr, status, error) {
            var errorMessage = 'Hata Oluştu: ';
            if (xhr.responseJSON && xhr.responseJSON.message) {
                errorMessage += xhr.responseJSON.message;
            } else {
                errorMessage += error;
            }
            $('#popupMessage').addClass('alert-danger').text(errorMessage).show();
        }
    });
});
});

function toggleRowSelection(personelId) {
    const row = document.querySelector(`tr[onclick="toggleRowSelection(${personelId})"]`);
    const iframe = row.querySelector('.row-checkbox-iframe');
    const checkbox = iframe.contentDocument.getElementById(`checkbox_${personelId}`);

    if (selectedIds.includes(personelId.toString())) {
        // Eğer seçiliyse, seçimi kaldır
        selectedIds = selectedIds.filter(id => id !== personelId.toString());
        row.style.backgroundColor = ""; // Arka plan rengini sıfırla
        checkbox.checked = false; // Checkbox'u işaretsiz yap
    } else {
        // Eğer seçili değilse, seç
        selectedIds.push(personelId.toString());
        row.style.backgroundColor = "#c8e6c9"; // Seçili personel için yeşil arka plan
        checkbox.checked = true; // Checkbox'u işaretli yap
    }

    // Tüm satırlar seçili mi kontrol et ve iframe checkbox'unu güncelle
    const allSelected = Array.from(document.querySelectorAll('.personel-item')).every(row => selectedIds.includes(row.getAttribute('onclick').match(/\d+/)[0]));
    const selectAllCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
    selectAllCheckbox.checked = allSelected;

    updateHiddenInputs();
}

function toggleSelectAll() {
    var table = document.getElementById('personelListesi');
    var rows = Array.from(table.querySelectorAll('.personel-row')); // Sadece personel satırlarını al
    var iframeCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
    var allSelected = rows.every(row => selectedIds.includes(row.getAttribute('data-personel-id')));

    rows.forEach(function (row) {
        var personelId = row.getAttribute('data-personel-id');
        const rowIframe = row.querySelector('.row-checkbox-iframe');
        const rowCheckbox = rowIframe.contentDocument.getElementById(`checkbox_${personelId}`);

        if (allSelected) {
            // Zaten tümü seçiliyse, tümünü kaldır
            selectedIds = selectedIds.filter(id => id !== personelId);
            row.style.backgroundColor = ""; // Arka plan rengini sıfırla
            rowCheckbox.checked = false; // Checkbox'u işaretsiz yap
        } else {
            // Aksi takdirde tümünü seç
            if (!selectedIds.includes(personelId)) {
                selectedIds.push(personelId);
            }
            row.style.backgroundColor = "#c8e6c9"; // Seçili personel için yeşil arka plan
            rowCheckbox.checked = true; // Checkbox'u işaretli yap
        }
    });

    // iframe checkbox'unu güncelle
    iframeCheckbox.checked = !allSelected;

    updateHiddenInputs();
}

function updateHiddenInputs() {
    // Öncelikle mevcut gizli inputları temizle
    document.querySelectorAll('input[name="selectedPersonelIds"]').forEach(input => input.remove());

    // Seçilen personel ID'lerini yeni gizli input olarak ekle
    const form = document.forms[0];
    selectedIds.forEach(id => {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'selectedPersonelIds';
        input.value = id;
        form.appendChild(input);
    });
}

function getHareketler(personelId) {
    $.ajax({
        url: '@Url.Action("GetHareketler", "Hareket")',
        type: 'GET',
        data: { personelId: personelId },
        success: function (data) {
            $('#hareketListesi').html(data);
        },
        error: function () {
            // Hata durumu
        }
    });
}

function showMessage(message, type) {
    var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
    $('#popupMessage').removeClass('alert-success alert-danger').addClass(alertClass).text(message).show();
}
function toggleRowSelection(personelId) {
    const row = document.querySelector(`tr[onclick="toggleRowSelection(${personelId})"]`);
    const iframe = row.querySelector('.row-checkbox-iframe');
    const checkbox = iframe.contentDocument.getElementById(`checkbox_${personelId}`);

    if (selectedIds.includes(personelId.toString())) {
        // Eğer seçiliyse, seçimi kaldır
        selectedIds = selectedIds.filter(id => id !== personelId.toString());
        row.style.backgroundColor = ""; // Arka plan rengini sıfırla
        checkbox.checked = false; // Checkbox'u işaretsiz yap
    } else {
        // Eğer seçili değilse, seç
        selectedIds.push(personelId.toString());
        row.style.backgroundColor = "#c8e6c9"; // Seçili personel için yeşil arka plan
        checkbox.checked = true; // Checkbox'u işaretli yap
    }

    // Tüm satırlar seçili mi kontrol et ve iframe checkbox'unu güncelle
    const allSelected = Array.from(document.querySelectorAll('.personel-item')).every(row => selectedIds.includes(row.getAttribute('onclick').match(/\d+/)[0]));
    const selectAllCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
    selectAllCheckbox.checked = allSelected;

    updateHiddenInputs();
}

function toggleSelectAll() {
    var table = document.getElementById('personelListesi');
    var rows = Array.from(table.querySelectorAll('.personel-row')); // Sadece personel satırlarını al
    var iframeCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
    var allSelected = rows.every(row => selectedIds.includes(row.getAttribute('data-personel-id')));

    rows.forEach(function (row) {
        var personelId = row.getAttribute('data-personel-id');
        const rowIframe = row.querySelector('.row-checkbox-iframe');
        const rowCheckbox = rowIframe.contentDocument.getElementById(`checkbox_${personelId}`);

        if (allSelected) {
            // Zaten tümü seçiliyse, tümünü kaldır
            selectedIds = selectedIds.filter(id => id !== personelId);
            row.style.backgroundColor = ""; // Arka plan rengini sıfırla
            rowCheckbox.checked = false; // Checkbox'u işaretsiz yap
        } else {
            // Aksi takdirde tümünü seç
            if (!selectedIds.includes(personelId)) {
                selectedIds.push(personelId);
            }
            row.style.backgroundColor = "#c8e6c9"; // Seçili personel için yeşil arka plan
            rowCheckbox.checked = true; // Checkbox'u işaretli yap
        }
    });

    // iframe checkbox'unu güncelle
    iframeCheckbox.checked = !allSelected;

    updateHiddenInputs();
}

function updateHiddenInputs() {
    // Öncelikle mevcut gizli inputları temizle
    document.querySelectorAll('input[name="selectedPersonelIds"]').forEach(input => input.remove());

    // Seçilen personel ID'lerini yeni gizli input olarak ekle
    const form = document.forms[0];
    selectedIds.forEach(id => {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'selectedPersonelIds';
        input.value = id;
        form.appendChild(input);
    });
}

function getHareketler(personelId) {
    $.ajax({
        url: '@Url.Action("GetHareketler", "Hareket")',
        type: 'GET',
        data: { personelId: personelId },
        success: function (data) {
            $('#hareketListesi').html(data);
        },
        error: function () {
            // Hata durumu
        }
    });
}

function showMessage(message, type) {
    var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
    $('#popupMessage').removeClass('alert-success alert-danger').addClass(alertClass).text(message).show();
}
function toggleRowSelection(personelId) {
    const row = document.querySelector(`tr[onclick="toggleRowSelection(${personelId})"]`);
    const iframe = row.querySelector('.row-checkbox-iframe');
    const checkbox = iframe.contentDocument.getElementById(`checkbox_${personelId}`);

    if (selectedIds.includes(personelId.toString())) {
        // Eğer seçiliyse, seçimi kaldır
        selectedIds = selectedIds.filter(id => id !== personelId.toString());
        row.style.backgroundColor = ""; // Arka plan rengini sıfırla
        checkbox.checked = false; // Checkbox'u işaretsiz yap
    } else {
        // Eğer seçili değilse, seç
        selectedIds.push(personelId.toString());
        row.style.backgroundColor = "#c8e6c9"; // Seçili personel için yeşil arka plan
        checkbox.checked = true; // Checkbox'u işaretli yap
    }

    // Tüm satırlar seçili mi kontrol et ve iframe checkbox'unu güncelle
    const allSelected = Array.from(document.querySelectorAll('.personel-item')).every(row => selectedIds.includes(row.getAttribute('onclick').match(/\d+/)[0]));
    const selectAllCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
    selectAllCheckbox.checked = allSelected;

    updateHiddenInputs();
}

function toggleSelectAll() {
    var table = document.getElementById('personelListesi');
    var rows = Array.from(table.querySelectorAll('.personel-row')); // Sadece personel satırlarını al
    var iframeCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
    var allSelected = rows.every(row => selectedIds.includes(row.getAttribute('data-personel-id')));

    rows.forEach(function (row) {
        var personelId = row.getAttribute('data-personel-id');
        const rowIframe = row.querySelector('.row-checkbox-iframe');
        const rowCheckbox = rowIframe.contentDocument.getElementById(`checkbox_${personelId}`);

        if (allSelected) {
            // Zaten tümü seçiliyse, tümünü kaldır
            selectedIds = selectedIds.filter(id => id !== personelId);
            row.style.backgroundColor = ""; // Arka plan rengini sıfırla
            rowCheckbox.checked = false; // Checkbox'u işaretsiz yap
        } else {
            // Aksi takdirde tümünü seç
            if (!selectedIds.includes(personelId)) {
                selectedIds.push(personelId);
            }
            row.style.backgroundColor = "#c8e6c9"; // Seçili personel için yeşil arka plan
            rowCheckbox.checked = true; // Checkbox'u işaretli yap
        }
    });

    // iframe checkbox'unu güncelle
    iframeCheckbox.checked = !allSelected;

    updateHiddenInputs();
}

function updateHiddenInputs() {
    // Öncelikle mevcut gizli inputları temizle
    document.querySelectorAll('input[name="selectedPersonelIds"]').forEach(input => input.remove());

    // Seçilen personel ID'lerini yeni gizli input olarak ekle
    const form = document.forms[0];
    selectedIds.forEach(id => {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'selectedPersonelIds';
        input.value = id;
        form.appendChild(input);
    });
}

function getHareketler(personelId) {
    $.ajax({
        url: '@Url.Action("GetHareketler", "Hareket")',
        type: 'GET',
        data: { personelId: personelId },
        success: function (data) {
            $('#hareketListesi').html(data);
        },
        error: function () {
            // Hata durumu
        }
    });
}

function showMessage(message, type) {
    var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
    $('#popupMessage').removeClass('alert-success alert-danger').addClass(alertClass).text(message).show();
}

function toggleRowSelection(personelId) {
        const row = document.querySelector(`tr[onclick="toggleRowSelection(${personelId})"]`);
        const iframe = row.querySelector('.row-checkbox-iframe');
        const checkbox = iframe.contentDocument.getElementById(`checkbox_${personelId}`);

        if (selectedIds.includes(personelId.toString())) {
            // Eğer seçiliyse, seçimi kaldır
            selectedIds = selectedIds.filter(id => id !== personelId.toString());
            row.style.backgroundColor = ""; // Arka plan rengini sıfırla
            checkbox.checked = false; // Checkbox'u işaretsiz yap
        } else {
            // Eğer seçili değilse, seç
            selectedIds.push(personelId.toString());
            row.style.backgroundColor = "#c8e6c9"; // Seçili personel için yeşil arka plan
            checkbox.checked = true; // Checkbox'u işaretli yap
        }

        // Tüm satırlar seçili mi kontrol et ve iframe checkbox'unu güncelle
        const allSelected = Array.from(document.querySelectorAll('.personel-item')).every(row => selectedIds.includes(row.getAttribute('onclick').match(/\d+/)[0]));
        const selectAllCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
        selectAllCheckbox.checked = allSelected;

        updateHiddenInputs();
    }

function toggleSelectAll() {
        var table = document.getElementById('personelListesi');
        var rows = Array.from(table.querySelectorAll('.personel-row')); // Sadece personel satırlarını al
        var iframeCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
        var allSelected = rows.every(row => selectedIds.includes(row.getAttribute('data-personel-id')));

        rows.forEach(function (row) {
            var personelId = row.getAttribute('data-personel-id');
            const rowIframe = row.querySelector('.row-checkbox-iframe');
            const rowCheckbox = rowIframe.contentDocument.getElementById(`checkbox_${personelId}`);

            if (allSelected) {
                // Zaten tümü seçiliyse, tümünü kaldır
                selectedIds = selectedIds.filter(id => id !== personelId);
                row.style.backgroundColor = ""; // Arka plan rengini sıfırla
                rowCheckbox.checked = false; // Checkbox'u işaretsiz yap
            } else {
                // Aksi takdirde tümünü seç
                if (!selectedIds.includes(personelId)) {
                    selectedIds.push(personelId);
                }
                row.style.backgroundColor = "#c8e6c9"; // Seçili personel için yeşil arka plan
                rowCheckbox.checked = true; // Checkbox'u işaretli yap
            }
        });

        // iframe checkbox'unu güncelle
        iframeCheckbox.checked = !allSelected;

        updateHiddenInputs();
    }

    function updateHiddenInputs() {
        // Öncelikle mevcut gizli inputları temizle
        document.querySelectorAll('input[name="selectedPersonelIds"]').forEach(input => input.remove());

        // Seçilen personel ID'lerini yeni gizli input olarak ekle
        const form = document.forms[0];
        selectedIds.forEach(id => {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'selectedPersonelIds';
            input.value = id;
            form.appendChild(input);
        });
    }

    function getHareketler(personelId) {
        $.ajax({
            url: '@Url.Action("GetHareketler", "Hareket")',
            type: 'GET',
            data: { personelId: personelId },
            success: function (data) {
                $('#hareketListesi').html(data);
            },
            error: function () {
                // Hata durumu
            }
        });
    }

    function showMessage(message, type) {
        var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
        $('#popupMessage').removeClass('alert-success alert-danger').addClass(alertClass).text(message).show();
    }
</script>


