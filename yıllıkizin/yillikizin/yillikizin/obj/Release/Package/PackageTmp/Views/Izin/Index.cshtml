@model yillikizin.Models.IzinViewModel

@{
    ViewBag.Title = "İzin Listesi";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
<!-- Toplu Sil Butonu -->
<div style="margin-bottom: 10px;">
    <button class="btn btn-danger" onclick="deleteSelectedIzin()">Seçili İzinleri Sil</button>
</div>

<h2>Aktif İzin Kayıtları</h2>
<table class="table-striped table" id="izinTable">
    <thead>
        <tr>
            <th>Seç</th>
            <th>Personel Adı</th>
            <th>Başlangıç Tarihi</th>
            <th>Bitiş Tarihi</th>
            <th>İzin Türü</th>
            <th>Açıklama</th>
            <th>İşlem</th>
        </tr>
        <tr>
            <th>
                <iframe id="selectAllIframe" srcdoc="
                <html>
                <body style='background-color:white;'>
                    <input type='checkbox' id='selectAll' onclick='parent.toggleSelectAll()'>
                    <label for='selectAll' style='font-size:14px;font-family:sans-serif;'></label>
                </body>
                </html>"
                style="width: 40px; height: 40px; border: none;"></iframe>
            </th>
            <th><input type="text" class="form-control filter-input-active" placeholder="Ara: Personel Adı" data-column="1" /></th>
            <th><input type="text" class="form-control filter-input-active" placeholder="Ara: Başlangıç Tarihi" data-column="2" /></th>
            <th><input type="text" class="form-control filter-input-active" placeholder="Ara: Bitiş Tarihi" data-column="3" /></th>
            <th><input type="text" class="form-control filter-input-active" placeholder="Ara: İzin Türü" data-column="4" /></th>
            <th><input type="text" class="form-control filter-input-active" placeholder="Ara: Açıklama" data-column="5" /></th>
            <th><input type="text" class="form-control filter-input-active" placeholder="Ara: " data-column="6" /></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var izin in Model.CurrentIzinList)
        {
            <tr class="izin-row" data-id="@izin.IzinId" data-baslangic="@izin.BaslangicTarihi.ToString("yyyy-MM-dd")" data-bitis="@izin.BitisTarihi.ToString("yyyy-MM-dd")" data-tur="@izin.IzinTuru" data-aciklama="@izin.Aciklama" onclick="toggleRowSelection(@izin.IzinId)">
                <td class="selection-cell">
                    <iframe class="row-checkbox-iframe" srcdoc="
                    <html>
                    <body style='background-color:white;'>
                        <input type='checkbox' id='checkbox_@izin.IzinId' onclick='parent.toggleRowSelection(@izin.IzinId)'>
                        <label for='checkbox_@izin.IzinId' style='font-size:14px;font-family:sans-serif;'></label>
                    </body>
                    </html>"
                    style="width: 40px; height: 40px; border: none;"></iframe>
                </td>
                <td>@izin.personel.adi @izin.personel.soyadi</td>
                <td>@izin.BaslangicTarihi.ToString("dd/MM/yyyy")</td>
                <td>@izin.BitisTarihi.ToString("dd/MM/yyyy")</td>
                <td>@izin.IzinTuru</td>
                <td>@izin.Aciklama</td>
                <td>
                    <button class="btn btn-warning edit-button">Düzenle</button>
                    <button class="btn btn-danger delete-button" data-id="@izin.IzinId">Sil</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- İzin Bilgileri Modal -->
<div class="modal fade" id="izinModal" tabindex="-1" role="dialog" aria-labelledby="izinModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="izinModalLabel">İzin Bilgileri</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="izinForm">
                    <div class="form-group">
                        <label for="izinTur">İzin Türü</label>
                        <input type="text" class="form-control" id="izinTur" readonly />
                    </div>
                    <div class="form-group">
                        <label for="baslangicTarihi">Başlangıç Tarihi</label>
                        <input type="date" class="form-control" id="baslangicTarihi" required />
                    </div>
                    <div class="form-group">
                        <label for="bitisTarihi">Bitiş Tarihi</label>
                        <input type="date" class="form-control" id="bitisTarihi" required />
                    </div>
                    <div class="form-group">
                        <label for="aciklama">Açıklama</label>
                        <textarea class="form-control" id="aciklama" required></textarea>
                    </div>
                    <input type="hidden" id="izinId" />
                    <button type="submit" class="btn btn-primary">Kaydet</button>
                </form>
            </div>
        </div>
    </div>
</div>

<h2>Geçmiş İzin Kayıtları</h2>
<table class="table-striped table" id="pastIzinTable">
    <thead>
        <tr>
            <th>Seç</th>
            <th>Personel Adı</th>
            <th>Başlangıç Tarihi</th>
            <th>Bitiş Tarihi</th>
            <th>İzin Türü</th>
            <th>Açıklama</th>
            <th>İşlem</th>
        </tr>
        <tr>
            <th>
                <iframe id="selectAllPastIframe" srcdoc="
                <html>
                <body style='background-color:white;'>
                    <input type='checkbox' id='selectAllPast' onclick='parent.toggleSelectAllPast()'>
                    <label for='selectAllPast' style='font-size:14px;font-family:sans-serif;'></label>
                </body>
                </html>"
                style="width: 40px; height: 40px; border: none;"></iframe>
            </th>
            <th><input type="text" class="form-control filter-input-past" placeholder="Ara: Personel Adı" data-column="1" /></th>
            <th><input type="text" class="form-control filter-input-past" placeholder="Ara: Başlangıç Tarihi" data-column="2" /></th>
            <th><input type="text" class="form-control filter-input-past" placeholder="Ara: Bitiş Tarihi" data-column="3" /></th>
            <th><input type="text" class="form-control filter-input-past" placeholder="Ara: İzin Türü" data-column="4" /></th>
            <th><input type="text" class="form-control filter-input-past" placeholder="Ara: Açıklama" data-column="5" /></th>
            <th><input type="text" class="form-control filter-input-past" placeholder="Ara: " data-column="6" /></th>
        </tr>
    </thead>
    <tbody>
        @if (Model.PastIzinList != null && Model.PastIzinList.Any())
        {
            foreach (var izin in Model.PastIzinList)
            {
                <tr class="past-izin-row" data-id="@izin.IzinId" onclick="togglePastRowSelection(@izin.IzinId)">
                    <td class="selection-cell">
                        <iframe class="row-checkbox-past-iframe" srcdoc="
                        <html>
                        <body style='background-color:white;'>
                            <input type='checkbox' id='checkbox_past_@izin.IzinId' onclick='parent.togglePastRowSelection(@izin.IzinId)'>
                            <label for='checkbox_past_@izin.IzinId' style='font-size:14px;font-family:sans-serif;'></label>
                        </body>
                        </html>"
                        style="width: 40px; height: 40px; border: none;"></iframe>
                    </td>
                    <td>@izin.personel.adi @izin.personel.soyadi</td>
                    <td>@izin.BaslangicTarihi.ToShortDateString()</td>
                    <td>@izin.BitisTarihi.ToShortDateString()</td>
                    <td>@izin.IzinTuru</td>
                    <td>@izin.Aciklama</td>
                    <td>
                        <button class="btn btn-danger delete-button" data-id="@izin.IzinId">Sil</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="7" class="text-center">Geçmiş izin kaydı bulunmamaktadır.</td>
            </tr>
        }
    </tbody>
</table>

<!-- İzin Bilgileri Modal -->
<div class="modal fade" id="izinModal" tabindex="-1" role="dialog" aria-labelledby="izinModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="izinModalLabel">İzin Bilgileri</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="izinForm">
                    <div class="form-group">
                        <label for="izinTur">İzin Türü</label>
                        <input type="text" class="form-control" id="izinTur" readonly />
                    </div>
                    <div class="form-group">
                        <label for="baslangicTarihi">Başlangıç Tarihi</label>
                        <input type="date" class="form-control" id="baslangicTarihi" required />
                    </div>
                    <div class="form-group">
                        <label for="bitisTarihi">Bitiş Tarihi</label>
                        <input type="date" class="form-control" id="bitisTarihi" required />
                    </div>
                    <div class="form-group">
                        <label for="aciklama">Açıklama</label>
                        <textarea class="form-control" id="aciklama" required></textarea>
                    </div>
                    <input type="hidden" id="izinId" />
                    <button type="submit" class="btn btn-primary">Kaydet</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmLabel">Silme Onayı</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Bu izin kaydını silmek istediğinizden emin misiniz?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Sil</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Success Modal -->
<div class="modal fade" id="deleteSuccessModal" tabindex="-1" role="dialog" aria-labelledby="deleteSuccessLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteSuccessLabel">Başarılı</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                İzin kaydı başarıyla silindi.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Tamam</button>
            </div>
        </div>
    </div>
</div>

<!-- jQuery ve Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
$(document).ready(function () {
    let selectedIzinIds = []; // Seçilen izin ID'lerini tutacak dizi
    let selectedPastIzinIds = []; // Seçilen geçmiş izin ID'lerini tutacak dizi

    $('.izin-row, .past-izin-row').hover(
        function () {
            $(this).addClass('table-hover');
        },
        function () {
            $(this).removeClass('table-hover');
        }
    );

    // Handle the edit button click event
    $(document).on('click', '.edit-button', function () {
        var row = $(this).closest('tr');
        var izinId = row.data('id');
        var baslangic = row.data('baslangic');
        var bitis = row.data('bitis');
        var izinTur = row.data('tur');
        var aciklama = row.data('aciklama');

        // Populate modal fields
        $('#izinId').val(izinId);
        $('#izinTur').val(izinTur);
        $('#baslangicTarihi').val(baslangic);
        $('#bitisTarihi').val(bitis);
        $('#aciklama').val(aciklama);

        // Show the modal
        $('#izinModal').modal('show');
    });

    $('#izinForm').submit(function (event) {
        event.preventDefault();

        var izinId = $('#izinId').val();
        var baslangicTarihi = $('#baslangicTarihi').val();
        var bitisTarihi = $('#bitisTarihi').val();
        var aciklama = $('#aciklama').val();

        // Validate the date inputs
        if (new Date(baslangicTarihi) > new Date(bitisTarihi)) {
            alert("Bitiş tarihi, başlangıç tarihinden önce olamaz.");
            return;
        }

        // Ajax request to update the leave
        $.ajax({
            url: '@Url.Action("UpdateIzin", "Izin")',
            type: 'POST',
            data: {
                id: izinId,
                baslangicTarihi: baslangicTarihi,
                bitisTarihi: bitisTarihi,
                aciklama: aciklama
            },
            success: function (response) {
                $('#izinModal').modal('hide');
                location.reload();
            },
            error: function () {
                alert("Bir hata oluştu, lütfen tekrar deneyin.");
            }
        });
    });

    // Handle delete button click event
    $(document).on('click', '.delete-button', function () {
        selectedIzinId = $(this).data('id');
        $('#deleteConfirmModal').modal('show'); // Show delete confirmation modal
    });

    // Confirm delete action
    $('#confirmDeleteBtn').click(function () {
        $.ajax({
            url: '@Url.Action("DeleteIzin", "Izin")',
            type: 'POST',
            data: { id: selectedIzinId },
            success: function (response) {
                $('#deleteConfirmModal').modal('hide'); // Hide confirmation modal
                $('#deleteSuccessModal').modal('show'); // Show success modal

                // Reload the page after the success modal is closed
                $('#deleteSuccessModal').on('hidden.bs.modal', function () {
                    location.reload();
                });
            },
            error: function () {
                alert("Bir hata oluştu, lütfen tekrar deneyin.");
            }
        });
    });

    // Tekli seçim işlemi (Aktif izinler için)
    window.toggleRowSelection = function(izinId) {
        const row = document.querySelector(`tr[data-id="${izinId}"]`);
        const iframe = row.querySelector('.row-checkbox-iframe');
        const checkbox = iframe.contentDocument.getElementById(`checkbox_${izinId}`);

        if (selectedIzinIds.includes(izinId.toString())) {
            selectedIzinIds = selectedIzinIds.filter(id => id !== izinId.toString());
            row.style.backgroundColor = "";
            checkbox.checked = false;
        } else {
            selectedIzinIds.push(izinId.toString());
            row.style.backgroundColor = "#c8e6c9";
            checkbox.checked = true;
        }

        const allSelected = Array.from(document.querySelectorAll('.izin-row')).every(row => selectedIzinIds.includes(row.dataset.id));
        const selectAllCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
        selectAllCheckbox.checked = allSelected;
    }

    // Toplu seçim işlemi (Aktif izinler için)
    window.toggleSelectAll = function() {
        const table = document.getElementById('izinTable');
        const rows = Array.from(table.querySelectorAll('.izin-row'));
        const iframeCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
        const allSelected = rows.every(row => selectedIzinIds.includes(row.dataset.id));

        rows.forEach(function (row) {
            const izinId = row.dataset.id;
            const rowIframe = row.querySelector('.row-checkbox-iframe');
            const rowCheckbox = rowIframe.contentDocument.getElementById(`checkbox_${izinId}`);

            if (allSelected) {
                selectedIzinIds = selectedIzinIds.filter(id => id !== izinId);
                row.style.backgroundColor = "";
                rowCheckbox.checked = false;
            } else {
                if (!selectedIzinIds.includes(izinId)) {
                    selectedIzinIds.push(izinId);
                }
                row.style.backgroundColor = "#c8e6c9";
                rowCheckbox.checked = true;
            }
        });

        iframeCheckbox.checked = !allSelected;
    }

    // Tekli seçim işlemi (Geçmiş izinler için)
    window.togglePastRowSelection = function(izinId) {
        const row = document.querySelector(`tr[data-id="${izinId}"]`);
        const iframe = row.querySelector('.row-checkbox-past-iframe');
        const checkbox = iframe.contentDocument.getElementById(`checkbox_past_${izinId}`);

        if (selectedPastIzinIds.includes(izinId.toString())) {
            selectedPastIzinIds = selectedPastIzinIds.filter(id => id !== izinId.toString());
            row.style.backgroundColor = "";
            checkbox.checked = false;
        } else {
            selectedPastIzinIds.push(izinId.toString());
            row.style.backgroundColor = "#c8e6c9";
            checkbox.checked = true;
        }

        const allSelected = Array.from(document.querySelectorAll('.past-izin-row')).every(row => selectedPastIzinIds.includes(row.dataset.id));
        const selectAllCheckbox = document.getElementById('selectAllPastIframe').contentDocument.getElementById('selectAllPast');
        selectAllCheckbox.checked = allSelected;
    }

    // Toplu seçim işlemi (Geçmiş izinler için)
    window.toggleSelectAllPast = function() {
        const table = document.getElementById('pastIzinTable');
        const rows = Array.from(table.querySelectorAll('.past-izin-row'));
        const iframeCheckbox = document.getElementById('selectAllPastIframe').contentDocument.getElementById('selectAllPast');
        const allSelected = rows.every(row => selectedPastIzinIds.includes(row.dataset.id));

        rows.forEach(function (row) {
            const izinId = row.dataset.id;
            const rowIframe = row.querySelector('.row-checkbox-past-iframe');
            const rowCheckbox = rowIframe.contentDocument.getElementById(`checkbox_past_${izinId}`);

            if (allSelected) {
                selectedPastIzinIds = selectedPastIzinIds.filter(id => id !== izinId);
                row.style.backgroundColor = "";
                rowCheckbox.checked = false;
            } else {
                if (!selectedPastIzinIds.includes(izinId)) {
                    selectedPastIzinIds.push(izinId);
                }
                row.style.backgroundColor = "#c8e6c9";
                rowCheckbox.checked = true;
            }
        });

        iframeCheckbox.checked = !allSelected;
    }

    // Seçilen izinleri silme işlemi
    window.deleteSelectedIzin = function() {
        const combinedSelectedIds = selectedIzinIds.concat(selectedPastIzinIds);

        if (combinedSelectedIds.length === 0) {
            showAlert("Lütfen silmek için en az bir izin seçin.", "error");
            return;
        }

        if (confirm("Seçilen izinleri silmek istediğinize emin misiniz?")) {
            $.ajax({
                url: '@Url.Action("DeleteSelectedIzin", "Izin")',
                type: 'POST',
                data: { ids: combinedSelectedIds },
                success: function (response) {
                    if (response.success) {
                        showAlert("Seçilen izinler başarıyla silindi!", "success");
                        selectedIzinIds = [];
                        selectedPastIzinIds = [];
                        location.reload();
                    } else {
                        showAlert("Seçilen izinler bulunamadı.", "error");
                    }
                },
                error: function () {
                    showAlert("Bir hata oluştu, lütfen tekrar deneyin.", "error");
                }
            });
        }
    }

    // Aktif izinler için filtreleme işlemi
    $(".filter-input-active").on("keyup", function () {
        var column = $(this).data("column");
        var value = $(this).val().toLowerCase();

        $("#izinTable tbody tr").filter(function () {
            $(this).toggle($(this).find("td").eq(column).text().toLowerCase().indexOf(value) > -1);
        });
    });

    // Geçmiş izinler için filtreleme işlemi
    $(".filter-input-past").on("keyup", function () {
        var column = $(this).data("column");
        var value = $(this).val().toLowerCase();

        $("#pastIzinTable tbody tr").filter(function () {
            $(this).toggle($(this).find("td").eq(column).text().toLowerCase().indexOf(value) > -1);
        });
    });

    // Show alert function
    function showAlert(message, type) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type}`;
        alertDiv.innerText = message;
        document.body.appendChild(alertDiv);

        setTimeout(() => {
            alertDiv.remove();
        }, 3000);
    }
});    // Show alert function
    function showAlert(message, type) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type}`;
        alertDiv.innerText = message;
        document.body.appendChild(alertDiv);

        setTimeout(() => {
            alertDiv.remove();
        }, 3000);
    }
     let selectedPastIzinIds = []; // Seçilen geçmiş izin ID'lerini tutacak dizi

    // Tekli seçim işlemi (Geçmiş izinler için)
    function togglePastRowSelection(izinId) {
        const row = document.querySelector(`tr[data-id="${izinId}"]`);
        const iframe = row.querySelector('.row-checkbox-past-iframe');
        const checkbox = iframe.contentDocument.getElementById(`checkbox_past_${izinId}`);

        if (selectedPastIzinIds.includes(izinId.toString())) {
            selectedPastIzinIds = selectedPastIzinIds.filter(id => id !== izinId.toString());
            row.style.backgroundColor = "";
            checkbox.checked = false;
        } else {
            selectedPastIzinIds.push(izinId.toString());
            row.style.backgroundColor = "#c8e6c9";
            checkbox.checked = true;
        }

        const allSelected = Array.from(document.querySelectorAll('.past-izin-row')).every(row => selectedPastIzinIds.includes(row.dataset.id));
        const selectAllCheckbox = document.getElementById('selectAllPastIframe').contentDocument.getElementById('selectAllPast');
        selectAllCheckbox.checked = allSelected;
    }

    // Toplu seçim işlemi (Geçmiş izinler için)
    function toggleSelectAllPast() {
        const table = document.getElementById('pastIzinTable');
        const rows = Array.from(table.querySelectorAll('.past-izin-row'));
        const iframeCheckbox = document.getElementById('selectAllPastIframe').contentDocument.getElementById('selectAllPast');
        const allSelected = rows.every(row => selectedPastIzinIds.includes(row.dataset.id));

        rows.forEach(function (row) {
            const izinId = row.dataset.id;
            const rowIframe = row.querySelector('.row-checkbox-past-iframe');
            const rowCheckbox = rowIframe.contentDocument.getElementById(`checkbox_past_${izinId}`);

            if (allSelected) {
                selectedPastIzinIds = selectedPastIzinIds.filter(id => id !== izinId);
                row.style.backgroundColor = "";
                rowCheckbox.checked = false;
            } else {
                if (!selectedPastIzinIds.includes(izinId)) {
                    selectedPastIzinIds.push(izinId);
                }
                row.style.backgroundColor = "#c8e6c9";
                rowCheckbox.checked = true;
            }
        });

        iframeCheckbox.checked = !allSelected;
    }

    // Seçilen geçmiş izinleri silme işlemi
    function deleteSelectedPastIzin() {
        if (selectedPastIzinIds.length === 0) {
            showAlert("Lütfen silmek için en az bir izin seçin.", "error");
            return;
        }

        if (confirm("Seçilen izinleri silmek istediğinize emin misiniz?")) {
            $.ajax({
                url: '@Url.Action("DeleteSelectedPastIzin", "Izin")',
                type: 'POST',
                data: { ids: selectedPastIzinIds },
                success: function (response) {
                    if (response.success) {
                        showAlert("Seçilen izinler başarıyla silindi!", "success");
                        selectedPastIzinIds = [];
                        location.reload();
                    } else {
                        showAlert("Seçilen izinler bulunamadı.", "error");
                    }
                },
                error: function () {
                    showAlert("Bir hata oluştu, lütfen tekrar deneyin.", "error");
                }
            });
        }
    }

    let selectedIzinIds = []; // Seçilen izin ID'lerini tutacak dizi

    // Tekli seçim işlemi
    function toggleRowSelection(izinId) {
        const row = document.querySelector(`tr[data-id="${izinId}"]`);
        const iframe = row.querySelector('.row-checkbox-iframe');
        const checkbox = iframe.contentDocument.getElementById(`checkbox_${izinId}`);

        if (selectedIzinIds.includes(izinId.toString())) {
            // Eğer seçiliyse, seçimi kaldır
            selectedIzinIds = selectedIzinIds.filter(id => id !== izinId.toString());
            row.style.backgroundColor = ""; // Arka plan rengini sıfırla
            checkbox.checked = false; // Checkbox'u işaretsiz yap
        } else {
            // Eğer seçili değilse, seç
            selectedIzinIds.push(izinId.toString());
            row.style.backgroundColor = "#c8e6c9"; // Seçili izin için yeşil arka plan
            checkbox.checked = true; // Checkbox'u işaretli yap
        }

        // Tüm satırlar seçili mi kontrol et ve iframe checkbox'unu güncelle
        const allSelected = Array.from(document.querySelectorAll('.izin-row')).every(row => selectedIzinIds.includes(row.dataset.id));
        const selectAllCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
        selectAllCheckbox.checked = allSelected;

        updateHiddenInputs();
    }

    // Toplu seçim işlemi
    function toggleSelectAll() {
        var table = document.getElementById('izinTable');
        var rows = Array.from(table.querySelectorAll('.izin-row')); // Sadece izin satırlarını al
        var iframeCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
        var allSelected = rows.every(row => selectedIzinIds.includes(row.dataset.id));

        rows.forEach(function (row) {
            var izinId = row.dataset.id;
            const rowIframe = row.querySelector('.row-checkbox-iframe');
            const rowCheckbox = rowIframe.contentDocument.getElementById(`checkbox_${izinId}`);

            if (allSelected) {
                // Zaten tümü seçiliyse, tümünü kaldır
                selectedIzinIds = selectedIzinIds.filter(id => id !== izinId);
                row.style.backgroundColor = ""; // Arka plan rengini sıfırla
                rowCheckbox.checked = false; // Checkbox'u işaretsiz yap
            } else {
                // Aksi takdirde tümünü seç
                if (!selectedIzinIds.includes(izinId)) {
                    selectedIzinIds.push(izinId);
                }
                row.style.backgroundColor = "#c8e6c9"; // Seçili izin için yeşil arka plan
                rowCheckbox.checked = true; // Checkbox'u işaretli yap
            }
        });

        // iframe checkbox'unu güncelle
        iframeCheckbox.checked = !allSelected;

        updateHiddenInputs();
    }

    // Gizli input'ları güncelle
    function updateHiddenInputs() {
        const hiddenInputs = document.querySelectorAll('input[name="selectedIzinIds"]');
        hiddenInputs.forEach(input => {
            input.disabled = !selectedIzinIds.includes(input.value); // Seçilen izinler için input'u etkinleştir
        });
    }

    // Seçilen izinleri silme işlemi
function deleteSelectedIzin() {
    if (selectedIzinIds.length === 0) {
        showAlert("Lütfen silmek için en az bir izin seçin.", "error");
        return;
    }

    if (confirm("Seçilen izinleri silmek istediğinize emin misiniz?")) {
        $.ajax({
            url: '@Url.Action("DeleteSelectedIzin", "Izin")',
            type: 'POST',
            data: { ids: selectedIzinIds },
            success: function (response) {
                if (response.success) {
                    showAlert("Seçilen izinler başarıyla silindi!", "success");
                    selectedIzinIds = [];
                    location.reload();
                } else {
                    showAlert("Seçilen izinler bulunamadı.", "error");
                }
            },
            error: function () {
                showAlert("Bir hata oluştu, lütfen tekrar deneyin.", "error");
            }
        });
    }
}

function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type}`;
    alertDiv.innerText = message;
    document.body.appendChild(alertDiv);

    setTimeout(() => {
        alertDiv.remove();
    }, 3000);
}

    // Filtreleme işlemi
    $(".filter-input").on("keyup", function () {
        var column = $(this).data("column");
        var value = $(this).val().toLowerCase();

        $("#izinTable tbody tr").filter(function () {
            $(this).toggle($(this).find("td").eq(column).text().toLowerCase().indexOf(value) > -1);
        });
    });
</script>
<style>
    /* Set table width to full width and enforce consistent column width */
    .table {
        width: 100%;
        table-layout: fixed;
    }

        /* Define equal-width columns */
        .table th, .table td {
            width: 16.6%; /* Divide equally for 6 columns */
            text-align: center;
        }

    /* Styling for table rows on hover */
    .izin-row, #pastIzinTable tbody tr {
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .izin-row:hover, #pastIzinTable tbody tr:hover {
            background-color: #e2e6ea; /* Light grey background on hover */
        }

    /* Style for input fields in headers */
    .filter-input {
        width: 100%;
        box-sizing: border-box;
    }
</style>

