@model IEnumerable<yillikizin.Models.personel>

@{
    ViewBag.Title = "İzin Ekle";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<h2>Personellere İzin Ekle</h2>

@if (ViewBag.Message != null)
{
    <div class="alert alert-info">
        @ViewBag.Message
    </div>
}


@using (Html.BeginForm())
{
    <div class="form-group date-group">
        <div>
            <label>Başlangıç Tarihi</label>
            @Html.TextBox("baslangicTarihi", null, new { @class = "form-control", @type = "date", id = "baslangicTarihi" })
        </div>
        <div>
            <label>Bitiş Tarihi</label>
            @Html.TextBox("bitisTarihi", null, new { @class = "form-control", @type = "date", id = "bitisTarihi" })
        </div>
    </div>

    <div class="form-group">
        <label>İzin Türü Seçin</label>
        <div class="izin-turu">
            @foreach (var izinTuru in ViewBag.IzinTurleri as IEnumerable<SelectListItem>)
            {
                <label onclick="toggleIzinTuru(this)">
                    <input type="radio" name="izinTuruId" value="@izinTuru.Value" />
                    @izinTuru.Text
                </label>
            }
        </div>
    </div>

    <div class="form-group">
        <label>Açıklama</label>
        @Html.TextBox("aciklama", null, new { @class = "form-control aciklama-input" })
    </div>
    <button type="button" class="btn btn-primary" onclick="validateForm()">İzin Ekle</button>
    <button type="submit" formaction="/Izin/IzinSil" class="btn btn-danger">İzin Sil</button>
    <h4>Personel Listesi</h4>
    <table id="personelTable">
        <thead>
            <tr>
                <th onclick="sortTable(0)">Seç</th>
                <th onclick="sortTable(1)">Adı</th>
                <th onclick="sortTable(2)">Soyadı</th>
                <th onclick="sortTable(3)">İşe Giriş Tarihi</th>
                <th onclick="sortTable(4)">Kart ID</th>
                <th onclick="sortTable(5)">Hak Edilen</th>
                <th onclick="sortTable(6)">Kullandığı</th>
                <th onclick="sortTable(7)">Kalan</th>
            </tr>
            <tr>
                <th style="background-color: white;">
                    <iframe id="selectAllIframe" srcdoc="
            <html>
            <body style='background-color:white;'>
                <input type='checkbox' id='selectAll' onclick='parent.toggleSelectAll()'>
                <label for='selectAll' style='font-size:14px;font-family:sans-serif;'></label>
            </body>
            </html>"
            style="width: 40px; height: 40px; "></iframe>
                </th>
                <th style="background-color: white;"><input type="text" id="adSearch" class="form-control" placeholder="Ad Ara"></th>
                <th style="background-color: white;"><input type="text" id="SoyadSearch" class="form-control" placeholder="Soyad Ara"></th>
                <th style="background-color: white;"></th>
                <th style="background-color: white;"><input type="text" id="kartSearch" class="form-control" placeholder="Kart No Ara"></th>
                <th style="background-color: white;"></th>
                <th style="background-color: white;"></th>
                <th style="background-color: white;"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var personel in Model)
            {
                <tr class="personel-item" onclick="toggleRowSelection(@personel.id)">
                    <td class="selection-cell">
                        <iframe class="row-checkbox-iframe" srcdoc="
                <html>
                <body style='background-color:white;'>
                    <input type='checkbox' id='checkbox_@personel.id' onclick='parent.toggleRowSelection(@personel.id)'>
                    <label for='checkbox_@personel.id' style='font-size:14px;font-family:sans-serif;'></label>
                </body>
                </html>"
                style="width: 40px; height: 40px; border: none;"></iframe>
                    </td>
                    <td>@personel.adi</td>
                    <td>@personel.soyadi</td>
                    <td>@personel.isegiristarih</td>
                    <td>@personel.kartno</td>
                    <td>@personel.hakettigi</td>
                    <td>@personel.kullandigi</td>
                    <td>@personel.kalan</td>
                </tr>
            }
        </tbody>
    </table>

}
<script type="text/javascript">
    // Mevcut JavaScript kodlarınıza ek olarak
    function validateForm() {
        const baslangicTarihi = document.getElementById('baslangicTarihi').value;
        const bitisTarihi = document.getElementById('bitisTarihi').value;

        if (!baslangicTarihi || !bitisTarihi) {
            alert("Lütfen başlangıç ve bitiş tarihlerini seçin.");
            return false;
        }

        // Formu gönder
        document.forms[0].submit();
    }

    let selectedIds = []; // Seçilen personel ID'lerini tutacak dizi

    // Tekli seçim işlemi
    function toggleRowSelection(personelId) {
        const row = document.querySelector(`tr[onclick="toggleRowSelection(${personelId})"]`);
        const iframe = row.querySelector('.row-checkbox-iframe');
        const checkbox = iframe.contentDocument.getElementById(`checkbox_${personelId}`);

        if (selectedIds.includes(personelId.toString())) {
            // Eğer seçiliyse, seçimi kaldır
            selectedIds = selectedIds.filter(id => id !== personelId.toString());
            row.style.backgroundColor = ""; // Arka plan rengini sıfırla
            checkbox.checked = false; // Checkbox'u işaretsiz yap
        } else {
            // Eğer seçili değilse, seç
            selectedIds.push(personelId.toString());
            row.style.backgroundColor = "#c8e6c9"; // Seçili personel için yeşil arka plan
            checkbox.checked = true; // Checkbox'u işaretli yap
        }

        // Tüm satırlar seçili mi kontrol et ve iframe checkbox'unu güncelle
        const allSelected = Array.from(document.querySelectorAll('.personel-item')).every(row => selectedIds.includes(row.getAttribute('onclick').match(/\d+/)[0]));
        const selectAllCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
        selectAllCheckbox.checked = allSelected;

        updateHiddenInputs();
    }
    function toggleIzinTuru(selectedLabel) {
        const labels = document.querySelectorAll('.izin-turu label');
        labels.forEach(label => {
            label.classList.remove('selected'); // Diğerlerinden seçili sınıfı kaldır
        });
        selectedLabel.classList.add('selected'); // Seçili butona sınıfı ekle
    }
    // Toplu seçim işlemi
    function toggleSelectAll() {
        var table = document.getElementById('personelTable');
        var rows = Array.from(table.querySelectorAll('.personel-item')); // Sadece personel satırlarını al
        var iframeCheckbox = document.getElementById('selectAllIframe').contentDocument.getElementById('selectAll');
        var allSelected = rows.every(row => selectedIds.includes(row.getAttribute('onclick').match(/\d+/)[0]));

        rows.forEach(function (row) {
            var personelId = row.getAttribute('onclick').match(/\d+/)[0];
            const rowIframe = row.querySelector('.row-checkbox-iframe');
            const rowCheckbox = rowIframe.contentDocument.getElementById(`checkbox_${personelId}`);

            if (allSelected) {
                // Zaten tümü seçiliyse, tümünü kaldır
                selectedIds = selectedIds.filter(id => id !== personelId);
                row.style.backgroundColor = ""; // Arka plan rengini sıfırla
                rowCheckbox.checked = false; // Checkbox'u işaretsiz yap
            } else {
                // Aksi takdirde tümünü seç
                if (!selectedIds.includes(personelId)) {
                    selectedIds.push(personelId);
                }
                row.style.backgroundColor = "#c8e6c9"; // Seçili personel için yeşil arka plan
                rowCheckbox.checked = true; // Checkbox'u işaretli yap
            }
        });

        // iframe checkbox'unu güncelle
        iframeCheckbox.checked = !allSelected;

        updateHiddenInputs();
    }

    // Gizli input'ları güncelle
    function updateHiddenInputs() {
        // Öncelikle mevcut gizli inputları temizle
        document.querySelectorAll('input[name="selectedPersonelIds"]').forEach(input => input.remove());

        // Seçilen personel ID'lerini yeni gizli input olarak ekle
        const form = document.forms[0];
        selectedIds.forEach(id => {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'selectedPersonelIds';
            input.value = id;
            form.appendChild(input);
        });
    }


    // Filtreleme işlemi
    document.getElementById('adSearch').addEventListener('input', function () {
        filterTable(1, this.value);
    });
    document.getElementById('SoyadSearch').addEventListener('input', function () {
        filterTable(2, this.value);
    });
    document.getElementById('kartSearch').addEventListener('input', function () {
        filterTable(4, this.value);
    });

    function filterTable(column, value) {
        var table = document.getElementById('personelTable');
        var tr = table.getElementsByTagName('tr');
        for (var i = 2; i < tr.length; i++) { // The loop starts from 2 to skip the header rows
            var td = tr[i].getElementsByTagName('td')[column];
            if (td) {
                var x = td.innerText.toLowerCase();
                if (x.indexOf(value.toLowerCase()) > -1) {
                    tr[i].style.display = '';
                } else {
                    tr[i].style.display = 'none';
                }
            }
        }
    }

    // Sıralama işlemi
    let sortDirections = Array(8).fill(true); // Sıralama yönlerini takip eden dizi

    function sortTable(columnIndex) {
        var table = document.getElementById('personelTable');
        var rows = Array.from(table.rows).slice(2); // Başlık satırlarını atla
        var isNumeric = columnIndex === 4 || columnIndex >= 5; // Kart ID ve sayısal sütunlar için kontrol

        rows.sort(function (a, b) {
            var aText = a.cells[columnIndex].innerText || a.cells[columnIndex].textContent;
            var bText = b.cells[columnIndex].innerText || b.cells[columnIndex].textContent;

            if (isNumeric) {
                return sortDirections[columnIndex] ? parseFloat(aText) - parseFloat(bText) : parseFloat(bText) - parseFloat(aText);
            } else {
                return sortDirections[columnIndex] ? aText.localeCompare(bText) : bText.localeCompare(aText);
            }
        });

        // Sıralanan satırları tabloya tekrar ekle
        rows.forEach(function (row) {
            table.tBodies[0].appendChild(row);
        });

        // Bir sonraki tıklama için sıralama yönünü tersine çevir
        sortDirections[columnIndex] = !sortDirections[columnIndex];
    }
</script>
<style>
    .personel-label {
        display: flex;
        align-items: center;
        font-size: 16px;
        padding: 5px;
    }

    .personel-item {
        transition: background-color 0.3s;
    }

        .personel-item:hover {
            background-color: #f0f0f0;
            cursor: pointer;
        }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        font-weight: bold;
    }

    .izin-turu {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

        .izin-turu label {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s, border-color 0.3s;
            background-color: #f9f9f9;
        }

        .izin-turu input[type="radio"] {
            display: none;
        }

        .izin-turu label:hover {
            background-color: #e0e0e0;
        }

        .izin-turu label.selected {
            background-color: #d1e7dd;
            border-color: #198754;
            font-weight: bold;
            color: black;
        }

    .aciklama-input {
        width: 300px;
    }

    .date-group {
        display: flex;
        gap: 10px;
    }
</style>

<style>

    .personel-item {
        cursor: pointer;
    }

    .selection-icon {
        color: green;
        font-size: 16px;
    }

    button,
    .button {
        position: relative;
        background-color: dodgerblue;
        color: white;
        border-radius: 0.2em;
        border: none;
        box-shadow: 0 0.125em 0.125em rgba(0, 0, 0, 0.3);
        box-sizing: border-box;
        display: inline-block;
        cursor: pointer;
        user-select: none;
        -webkit-user-select: none;
        font-family: inherit;
        font-size: inherit;
        line-height: normal;
        font-weight: bold;
        text-align: center;
        outline: none;
        padding: 0.6em;
        margin: 0.2em;
        transition: all 0.1s;
        min-width: 10em;
    }

        button:focus:not(:disabled),
        .button:focus:not(:disabled) {
            opacity: 0.8;
        }

        button:hover:not(:disabled),
        .button:hover:not(:disabled) {
            opacity: 0.8;
            top: -0.1em;
            box-shadow: 0 0.2em 0.1em rgba(0, 0, 0, 0.2);
        }

        button:hover:active,
        .button:hover:active {
            top: 0.1em;
            box-shadow: 0 0.02em 0.125em rgba(0, 0, 0, 0.4);
            transition: all 0.05s;
        }

        button:disabled,
        .button:disabled {
            cursor: initial;
            background-color: silver;
        }

    a.button {
        text-decoration: none;
    }

    body {
        font-family: Arial, sans-serif;
        background-color: #f4f6f9;
        color: #333;
        margin: 0;
        padding: 0;
    }


    .modern-box {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        cursor: pointer;
        height: 150px; /* Fixed height for consistency */
        margin-bottom: 10px;
    }

        .modern-box:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }

    .modern-box-content {
        text-align: left;
        flex-grow: 1;
        padding-right: 20px;
    }

        .modern-box-content h3 {
            margin: 0;
            font-size: 1.2em;
            color: #007bff;
        }

        .modern-box-content p {
            margin: 10px 0 0;
            font-size: 2em;
            color: #333;
        }

    .modern-box-image img {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 50%;
    }

    h1, h2 {
        color: #007bff;
    }

    table {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        margin-top: 20px;
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 12px;
        border: 1px solid #ddd;
    }

    th {
        background: #007bff;
        color: white;
        cursor: pointer;
    }

    td {
        vertical-align: middle;
    }
</style>
